import groovy.transform.Field


def success() {
  echo "\033[1;32m[Executed Successfully] \033[0m"
}

def error() {
  echo "\033[1;31m[Failed to Execute] \033[0m "
}

def unstable() {
  echo "\033[1;33m[Unstable] \033[0m "
}

pipeline {
  agent any

  options {
    ansiColor('xterm')
    skipDefaultCheckout(true)
  }

  parameters {
    choice(name: 'REFRESH', choices: ['no', 'yes'], description: 'Please select refresh parameters as Yes if you want to refresh the parameters.')
    choice(name: 'BRANCH', choices: ['', 'dev', 'test','main'], description: 'Select Branch to build')
    choice(name: 'ACTION', choices: ['','DEPLOY'], description: 'Select the action to be done. DEPLOY will build, test and deploy the code.')
    booleanParam(name: 'TOGGLE', defaultValue: false, description: 'Are you sure you want to perform this action?')
  }

  stages {

    stage('GIT Checkout') {
      steps {
        script {
          git branch: 'main', url: 'https://github.com/Bhavyajainbt/node-employee-restAPIs.git'
        }
      }
    }


    stage('PRE-CHECKS') {

      when {
        expression {
          params.REFRESH == 'no'
        }
      }

      steps {
        script{
            sh 'whoami'
            if(params.BRANCH == ""){
              sh "echo 'Please select branch!!'"
              currentBuild.result = 'ABORTED'
          }
            if(params.ACTION == ""){
              sh "echo 'Please select action to perform!!'"
              currentBuild.result = 'ABORTED'
          }
            if (!params.TOGGLE) {
              sh "echo 'Please mark the Toggle checkbox!!'"
              currentBuild.result = 'ABORTED' //If you do not set the toggle flag to true before executing the build action, it will automatically abort the pipeline for any action.
          }
        }
      }
    }

    stage('Build'){
      when {
        expression {
          params.REFRESH == 'no' && params.ACTION == 'DEPLOY' && params.TOGGLE == true 
        }
      }

      steps {
        script {
          sh 'mvn -B -DskipTests clean package'
        }
      }
    }
  }
  post {
    success {
      success()
    }
  }
}
